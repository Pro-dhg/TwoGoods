<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yamu.data.sample.service.resources.mapper.AbnormalJikeMapper">

    <select id="getTotal" resultType="java.lang.Long">
        select count(1) from (
            select answer_ip as answerIp,domain_name as domainName,answer_province as answerProvince,answer_city as answerCity,
            cdn_business as cdnBusiness,cdn_illegal_business as cdnIllegalBusiness,
            sum(parse_total_cnt) as parseTotalCnt,sum(net_in_parse_total_cnt) as netInParseTotalCnt,sum(within_parse_total_cnt) as withinParseTotalCnt
            from ${queryTable}
            <where> 1=1
                <include refid="selectiveParam"/>
                <include refid="selectiveTopNParam"/>
            </where>
            group by answer_ip,domain_name,answer_province,answer_city,cdn_business,cdn_illegal_business
        )
    </select>

    <select id="getSumData" resultType="com.yamu.data.sample.service.resources.entity.vo.AbnormalJikeList">
        select
        sum(parse_total_cnt) as parseTotalCnt
        from ${queryTable}
        <where> 1=1
            <include refid="selectiveParam"/>
            <include refid="selectiveTopNParam"/>
        </where>
    </select>

    <select id="getList" resultType="com.yamu.data.sample.service.resources.entity.vo.AbnormalJikeList">
        select answer_ip as answerIp,domain_name as domainName,answer_province as answerProvince,answer_city as answerCity,
        cdn_business as cdnBusiness,cdn_illegal_business as cdnIllegalBusiness,
        sum(parse_total_cnt) as parseTotalCnt,sum(net_in_parse_total_cnt) as netInParseTotalCnt,sum(within_parse_total_cnt) as withinParseTotalCnt
        from ${queryTable}
        <where> 1=1
            <include refid="selectiveParam"/>
            <include refid="selectiveTopNParam"/>
        </where>
        group by answer_ip,domain_name,answer_province,answer_city,cdn_business,cdn_illegal_business
        order by parseTotalCnt desc
        limit #{queryParam.offset}, #{queryParam.limit}
    </select>

    <sql id="selectiveParam">
        <if test="queryParam.startTime != null and queryParam.startTime != ''">and parse_time &gt;= #{queryParam.startTime}</if>
        <if test="queryParam.endTime != null and queryParam.endTime != ''">and parse_time &lt; #{queryParam.endTime}</if>
        <if test="queryParam.cdnBusinessList != null and queryParam.cdnBusinessList.size()>0">
            and cdn_business in
            <foreach collection="queryParam.cdnBusinessList" open="(" close=")" separator="," item="item">
                #{item}
            </foreach>
        </if>
        <if test="queryParam.cdnIllegalBusinessList != null and queryParam.cdnIllegalBusinessList.size()>0">
            and cdn_illegal_business in
            <foreach collection="queryParam.cdnIllegalBusinessList" open="(" close=")" separator="," item="item">
                #{item}
            </foreach>
        </if>
        <if test = "queryParam.answerIp != null and queryParam.answerIp != ''">and answer_ip ilike concat('%',#{queryParam.answerIp},'%') </if>
        <if test = "queryParam.domainName != null and queryParam.domainName != ''">and domain_name ilike concat('%',#{queryParam.domainName},'%') </if>
    </sql>

    <sql id="selectiveTopNParam">
        <if test="queryParam.rankNumber != null and queryParam.rankNumber != ''">
            and (answer_ip,domain_name) global in (
                select answer_ip,domain_name from (
                select answer_ip,domain_name,sum(parse_total_cnt) as parse_total_cnt
                from ${queryTable}
                <where> 1=1
                    <include refid="selectiveParam"/>
                </where>
                group by answer_ip,domain_name
                order by parse_total_cnt desc
                limit #{queryParam.rankNumber})
            )
        </if>
    </sql>
</mapper>
